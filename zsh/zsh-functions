# Function to source files if they exist
function zsh_add_file() {
	[ -f "$ZDOTDIR/$1" ] && source "$ZDOTDIR/$1"
}

function zsh_add_plugin() {
	PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
	if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then
		# For plugins
		zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
		zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.zsh"
	else
		git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
	fi
}

function zsh_add_completion() {
	PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
	if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then
		# For completions
		completion_file_path=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
		fpath+="$(dirname "${completion_file_path}")"
		zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh"
	else
		git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
		fpath+=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
		[ -f $ZDOTDIR/.zccompdump ] && $ZDOTDIR/.zccompdump
	fi
	completion_file="$(basename "${completion_file_path}")"
	if [ "$2" = true ] && compinit "${completion_file:1}"
}

# Use lf to switch directories and bind it to ctrl-o
function lfcd () {
	tmp="$(mktemp)"
	lf -last-dir-path="$tmp" "$@"
	if [ -f "$tmp" ]; then
		dir="$(cat "$tmp")"
		rm -f "$tmp" >/dev/null
		[ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
	fi
}

function fzf-ps () {
  (date; ps -ef) |
	fzf --bind='ctrl-r:reload(date; ps -ef)' \
		--header=$'Press CTRL-R to reload\n\n' --header-lines=2 \
		--preview='echo {}' --preview-window=down,3,wrap \
		--layout=reverse --height=80% | awk '{print $2}' | xargs kill -9
}

# Universal package search with fzf
function pkgsearch() {
	local pkg_manager=$1
	local log_enabled=true
	local log_file=~/pkgsearch.log
	local log_max_size=1048576 # 1 MB in bytes
	
	# Detect package manager if not passed as an argument
	if [ -z "$pkg_manager" ]; then
		if command -v pacman &>/dev/null; then
			pkg_manager="pacman"
		elif command -v apt &>/dev/null; then
			pkg_manager="apt"
		elif command -v dnf &>/dev/null; then
			pkg_manager="dnf"
	elif command -v zypper &>/dev/null; then
			pkg_manager="zypper"
		else
			echo "Supported package manager not found (pacman, apt, dnf)." >&2
			return 1
		fi
	fi

	# Perform fuzzy search and preview based on the package manager
	case "$pkg_manager" in
		pacman|yay|paru)
		local packages=$($pkg_manager -Slq | fzf --multi --preview "$pkg_manager -Si {1}")
			;;
		apt)
			local packages=$(apt-cache pkgnames | fzf --multi --preview 'apt show {1}')
			;;
		dnf)
			local packages=$(dnf list available --quiet | awk '{print $1}' | fzf --multi --preview 'dnf info {1}')
			;;
	zypper)
			local packages=$(zypper search --type package | awk 'NR>2 {print $3}' | fzf --multi --preview 'zypper info {1}')
			;;
	*)
			echo "Unsupported package manager: $pkg_manager" >&2
			return 1
			;;
	esac

	# Install selected packages
	if [ ! -z "$packages" ]; then
		local install_command
		case "$pkg_manager" in
			pacman)
				install_command="sudo $pkg_manager -S $(echo $packages)"
				;;
			yay|paru)
				install_command="$pkg_manager -S $(echo $packages)"
				;;
			apt)
				install_command="sudo apt install $(echo $packages)"
				;;
			dnf)
				install_command="sudo dnf install $(echo $packages)"
				;;
		esac
		set -x
		eval $install_command && {
			if [ "$log_enabled" = true ]; then
				if [ -f "$log_file" ] && [ $(stat -c%s "$log_file") -gt $log_max_size ]; then
					mv "$log_file" "${log_file}.old"
				fi
				echo "[$(date)]: $packages" >> "$log_file"
			fi
		}
	else
		echo "No packages selected."
	fi
}


# Yazi File-Manager
function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

function t () {
  telnet 192.168.$1
}

function env-cross-compile () {
  declare -x ARCH="arm"
  declare -x CROSS_COMPILE="arm-linux-gnueabihf-"
  export PATH=/opt/gcc-9.1.0-2019.11-x86_64_arm-linux-gnueabihf/bin:$PATH
}

function svn-checkout(){
  svn checkout svn://192.168.100.5/$1 ~/svnHome/$1
}
